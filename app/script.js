// script.js
const form = document.getElementById('emailForm'); // This ID doesn't exist in index.html, it's a general placeholder.
const generateBtn = document.getElementById('generateBtn');
const outputBox = document.getElementById('outputBox');
const copyBtn = document.getElementById('copyBtn');

// Language selector elements
const languageButtons = document.querySelectorAll('#languageSelectorContainer button'); // Changed to select buttons directly

// User information input elements (from your original script)
const yourNameInput = document.getElementById('senderName'); // Corrected ID based on index.html
const yourEmailInput = document.getElementById('senderEmail'); // Corrected ID based on index.html
const yourPhoneInput = document.getElementById('senderPhone'); // Corrected ID based on index.html
const yourCompanyInput = document.getElementById('senderCompany'); // Corrected ID based on index.html

// Your Gemini API Key
const API_KEY = 'AIzaSyAMIen9b701UekKNPVEuICV42kFZmhoUs4'; 

// --- Language Translations Object ---
const translations = {
    en: {
        documentTitle: "IgniteInbox: Your AI-Powered Outreach Engine",
        headerTitle: "IgniteInbox", // Emoji added in HTML via JS
        headerTagline: "Your AI-Powered Outreach Engine",
        headerDescription: "Transform your cold outreach with personalized, high-converting emails generated by advanced AI",
        yourSenderDetailsTitle: "Your Sender Details", // Emoji added in HTML via JS
        yourNamePlaceholder: "Your Name",
        yourEmailPlaceholder: "Your Email",
        yourPhonePlaceholder: "Your Phone Number (Optional)",
        yourCompanyPlaceholder: "Your Company/Title (Optional)",
        recipientDetailsTitle: "Recipient & Pitch Details", // Emoji added in HTML via JS
        recipientNamePlaceholder: "Recipient's Name",
        companyNamePlaceholder: "Company Name",
        jobTitlePlaceholder: "Role/Job Title",
        selectTonePlaceholder: "Select a tone for your email...",
        toneFormal: "Formal & Professional",
        toneFriendly: "Friendly & Approachable",
        toneBold: "Bold & Direct",
        toneCasual: "Casual & Conversational",
        tonePersuasive: "Highly Persuasive",
        productServicePlaceholder: "Product/Service to Pitch",
        generateButton: "Generate Email", 
        generatedEmailTitle: "Your Generated Email", // Emoji added in HTML via JS
        copyButton: "Copy to Clipboard", 
        outputBoxInitialText: "Your perfectly crafted, AI-generated cold email will appear here, ready to send!",
        // JS Alert/Dynamic messages
        alertFillRequired: "Please fill in all *required* fields.",
        generateButtonLoading: "Crafting Your Masterpiece...",
        outputBoxLoading: "IgniteInbox is firing up the engines to craft your perfect cold email...",
        copyButtonCopied: "Copied!",
        copyButtonFailed: "Failed!",
        errorApi: "Error generating email: ",
        errorApiProblem: "\n\nPlease check the browser console for more details.",
        errorApi403: "\n\nPossible issue: Invalid or missing API key, or API not enabled for your project.",
        errorApi400: "\n\nPossible issue: Malformed request, rate limit exceeded, or content moderation violation.",
        errorApi500: "\n\nPossible issue: Google API server error. Please try again later.",
        errorApiInvalidResponse: "Invalid response format from API. Please try again or check API documentation.",
        signatureBestRegards: "Best regards,",
        signatureEmail: "Email:",
        signaturePhone: "Phone:"
    },
    fr: {
        documentTitle: "IgniteInbox: Votre Moteur d'Outreach IA",
        headerTitle: "IgniteInbox",
        headerTagline: "Votre Moteur d'Outreach IA",
        headerDescription: "Transformez votre prospection à froid avec des e-mails personnalisés et à fort taux de conversion générés par une IA avancée",
        yourSenderDetailsTitle: "Vos Coordonnées d'Expéditeur",
        yourNamePlaceholder: "ex: Alex Johnson",
        yourEmailPlaceholder: "ex: alex.j@votreentreprise.com",
        yourPhonePlaceholder: "ex: +33 6 12 34 56 78",
        yourCompanyPlaceholder: "ex: PDG, Spark Solutions Inc.",
        recipientDetailsTitle: "Détails du Destinataire et du Pitch",
        recipientNamePlaceholder: "ex: Sarah Davies",
        companyNamePlaceholder: "ex: InnovateTech Inc.",
        jobTitlePlaceholder: "ex: Directeur Produit, Responsable Marketing",
        selectTonePlaceholder: "Sélectionnez un ton pour votre e-mail...",
        toneFormal: "Formel & Professionnel",
        toneFriendly: "Amicable & Abordable",
        toneBold: "Audacieux & Direct",
        toneCasual: "Décontracté & Conversationnel",
        tonePersuasive: "Très Persuasif",
        productServicePlaceholder: "Décrivez clairement votre produit ou service et son avantage clé pour le destinataire. Soyez précis ! ex: 'Notre CRM alimenté par l'IA aide les équipes de vente à automatiser le nurturing des leads et à conclure des affaires 30% plus rapidement.'",
        generateButton: "Générer l'E-mail",
        generatedEmailTitle: "Votre E-mail Généré",
        copyButton: "Copier dans le Presse-papiers",
        outputBoxInitialText: "Votre e-mail froid, parfaitement rédigé par l'IA, apparaîtra ici, prêt à être envoyé !",
        // JS Alert/Dynamic messages
        alertFillRequired: "Veuillez remplir tous les champs *obligatoires*.",
        generateButtonLoading: "Création de votre chef-d'œuvre...",
        outputBoxLoading: "IgniteInbox démarre les moteurs pour créer votre e-mail froid parfait...",
        copyButtonCopied: "Copié !",
        copyButtonFailed: "Échec !",
        errorApi: "Erreur lors de la génération de l'e-mail : ",
        errorApiProblem: "\n\nVeuillez vérifier la console du navigateur pour plus de détails.",
        errorApi403: "\n\nProblème possible : Clé API invalide ou manquante, ou API non activée pour votre projet.",
        errorApi400: "\n\nProblème possible : Requête malformée, limite de taux dépassée, ou violation de la modération du contenu.",
        errorApi500: "\n\nProblème possible : Erreur du serveur API Google. Veuillez réessayer plus tard.",
        errorApiInvalidResponse: "Format de réponse invalide de l'API. Veuillez réessayer ou consulter la documentation de l'API.",
        signatureBestRegards: "Cordialement,",
        signatureEmail: "E-mail :",
        signaturePhone: "Téléphone :"
    },
    ar: {
        documentTitle: "إجنايت إنبوكس: محرك التواصل الخاص بك بالذكاء الاصطناعي",
        headerTitle: "إجنايت إنبوكس",
        headerTagline: "محرك التواصل الخاص بك بالذكاء الاصطناعي",
        headerDescription: "حوّل تواصلك البارد إلى رسائل بريد إلكتروني مخصصة وعالية التحويل يتم إنشاؤها بواسطة الذكاء الاصطناعي المتقدم",
        yourSenderDetailsTitle: "تفاصيل المرسل الخاصة بك",
        yourNamePlaceholder: "اسمك",
        yourEmailPlaceholder: "بريدك الإلكتروني",
        yourPhonePlaceholder: "رقم هاتفك (اختياري)",
        yourCompanyPlaceholder: "شركتك/منصبك (اختياري)",
        recipientDetailsTitle: "تفاصيل المستلم وعرض الموضوع",
        recipientNamePlaceholder: "اسم المستلم",
        companyNamePlaceholder: "اسم الشركة",
        jobTitlePlaceholder: "الدور/المسمى الوظيفي",
        selectTonePlaceholder: "اختر نبرة لبريدك الإلكتروني...",
        toneFormal: "رسمية ومهنية",
        toneFriendly: "ودودة وودودة",
        toneBold: "جريئة ومباشرة",
        toneCasual: "عفوية ومحادثة",
        tonePersuasive: "مقنعة للغاية",
        productServicePlaceholder: "المنتج/الخدمة المراد عرضها",
        generateButton: "إنشاء بريد إلكتروني",
        generatedEmailTitle: "بريدك الإلكتروني الذي تم إنشاؤه",
        copyButton: "نسخ إلى الحافظة",
        outputBoxInitialText: "سيظهر بريدك الإلكتروني البارد المصمم بشكل مثالي بواسطة الذكاء الاصطناعي هنا، جاهزًا للإرسال!",
        // JS Alert/Dynamic messages
        alertFillRequired: "يرجى ملء جميع الحقول *المطلوبة*.",
        generateButtonLoading: "جاري إنشاء تحفتك...",
        outputBoxLoading: "إجنايت إنبوكس يشغل المحركات لصياغة بريدك الإلكتروني البارد المثالي...",
        copyButtonCopied: "تم النسخ!",
        copyButtonFailed: "فشل!",
        errorApi: "خطأ في إنشاء البريد الإلكتروني: ",
        errorApiProblem: "\n\nيرجى التحقق من وحدة تحكم المتصفح لمزيد من التفاصيل.",
        errorApi403: "\n\nمشكلة محتملة: مفتاح API غير صالح أو مفقود، أو API غير مفعل لمشروعك.",
        errorApi400: "\n\nمشكلة محتملة: طلب خاطئ، تجاوز حد المعدل، أو انتهاك اعتدال المحتوى.",
        errorApi500: "\n\nمشكلة محتملة: خطأ في خادم API Google. يرجى المحاولة مرة أخرى لاحقًا.",
        errorApiInvalidResponse: "تنسيق استجابة غير صالح من API. يرجى المحاولة مرة أخرى أو مراجعة وثائق API.",
        signatureBestRegards: "مع خالص التقدير،",
        signatureEmail: "البريد الإلكتروني:",
        signaturePhone: "الهاتف:"
    }
};

// State variables (simulated with global variables and direct DOM manipulation)
let formData = {
    senderName: '', senderEmail: '', senderPhone: '', senderCompany: '',
    recipientName: '', companyName: '', jobTitle: '', emailTone: '', productService: ''
};
let isLoading = false;
let copySuccess = false;
let generatedEmailContent = ''; // Stores the actual generated email text
let currentLanguage = localStorage.getItem('selectedLanguage') || 'en'; // Initial language


// --- Utility Functions ---

function saveUserData() {
    for (const key in formData) {
        if (key.startsWith('sender')) {
            localStorage.setItem(key, formData[key]);
        }
    }
}

function loadUserData() {
    for (const key of ['senderName', 'senderEmail', 'senderPhone', 'senderCompany']) {
        formData[key] = localStorage.getItem(key) || '';
        const inputElement = document.getElementById(key);
        if (inputElement) {
            inputElement.value = formData[key];
        }
    }
}

// Applies translations to elements with data-key attributes
function applyTranslations(lang) {
    const currentTranslations = translations[lang];
    if (!currentTranslations) {
        console.warn(`No translations found for language: ${lang}`);
        return;
    }

    document.title = currentTranslations.documentTitle;
    document.body.dir = (lang === 'ar') ? 'rtl' : 'ltr';

    document.querySelectorAll('[data-key]').forEach(element => {
        const key = element.dataset.key;
        if (currentTranslations[key]) {
            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {
                element.placeholder = currentTranslations[key];
            } else if (element.tagName === 'OPTION') {
                element.textContent = currentTranslations[key];
            } else if (element.tagName === 'BUTTON' || element.tagName === 'SPAN') {
                // For buttons and spans that are text content
                element.textContent = currentTranslations[key];
            } else if (element.tagName === 'P' && element.classList.contains('initial-text')) {
                element.textContent = currentTranslations.outputBoxInitialText; // Specific for initial text
            } else {
                // For H1, H2, H3, P that don't have explicit spans for icons
                element.textContent = currentTranslations[key];
            }
        }
    });

    // Handle elements with fixed emojis in HTML, as they need special handling for translation
    // Note: The previous logic injected SVGs here. I will adjust this to match the HTML structure
    // where SVGs are expected to be present, and this JS only updates the text.
    // However, if the SVGs are *not* in the HTML and are meant to be injected,
    // this part needs the full SVG code. Based on the previous correction, HTML had no SVGs.
    // So, I'll put the full SVGs in the JS now for clarity, assuming HTML is clean.

    // This part should inject the SVGs if they are not in the HTML for language switching
    // Re-introducing the SVG injection logic if the HTML was cleaned.
    document.querySelector('.header h1').innerHTML = `✨ ${currentTranslations.headerTitle}`;
    
    // For card headers, ensure the SVG is *inside* the h2 if that's how it's handled.
    // Re-adding the full SVG paths to be robust for language switching.
    // If the HTML for these SVG paths is in the .html file, then the .innerHTML assignment 
    // will replace them, which is acceptable if the goal is to simply update the text next to them.
    // If you want static SVGs and just dynamic text, then update this part to only change textContent of a span.
    // For now, I'll put the SVG content here as in the previous `script.js` context for clarity.

    document.querySelector('.card-header h2[data-key="yourSenderDetailsTitle"]').innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user text-blue-300"><path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>
        ${currentTranslations.yourSenderDetailsTitle}
    `;
    document.querySelector('.card-header h2[data-key="recipientDetailsTitle"]').innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-target text-green-300"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="6"/><circle cx="12" cy="12" r="2"/></svg>
        ${currentTranslations.recipientDetailsTitle}
    `;
    document.querySelector('.output-header h2[data-key="generatedEmailTitle"]').innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail text-pink-300"><rect width="20" height="16" x="2" y="4" rx="2"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/></svg>
        ${currentTranslations.generatedEmailTitle}
    `;
            
    // Update active language button state
    languageButtons.forEach(button => {
        if (button.value === lang) {
            button.classList.add('active');
        } else {
            button.classList.remove('active');
        }
    });

    // Ensure generate and copy button states are updated with correct text
    updateGenerateButtonState();
    updateCopyButtonState();
}


// --- Particle Background Logic ---
function generateParticles(numParticles) {
    for (let i = 0; i < numParticles; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.top = `${Math.random() * 100}%`;
        particle.style.animationDelay = `${Math.random() * 6}s`;
        particle.style.animationDuration = `${Math.random() * 3 + 3}s`;
        particleContainer.appendChild(particle);
    }
}

// --- Core Logic ---

function handleInputChange(e) {
    formData[e.target.name] = e.target.value;
}

async function generateEmail() {
    const currentTranslations = translations[currentLanguage];

    // Validate required fields
    const requiredFields = ['senderName', 'senderEmail', 'recipientName', 'companyName', 'jobTitle', 'emailTone', 'productService'];
    const missingFields = requiredFields.filter(field => !document.getElementById(field).value); // Check input values

    if (missingFields.length > 0) {
        alert(currentTranslations.alertFillRequired);
        return;
    }

    // Update formData from current input values right before sending
    formData.senderName = document.getElementById('senderName').value;
    formData.senderEmail = document.getElementById('senderEmail').value;
    formData.senderPhone = document.getElementById('senderPhone').value;
    formData.senderCompany = document.getElementById('senderCompany').value;
    formData.recipientName = document.getElementById('recipientName').value;
    formData.companyName = document.getElementById('companyName').value;
    formData.jobTitle = document.getElementById('jobTitle').value;
    formData.emailTone = document.getElementById('emailTone').value;
    formData.productService = document.getElementById('productService').value;

    saveUserData(); // Save user data to localStorage

    isLoading = true;
    updateGenerateButtonState();
    generatedEmailContent = ""; // Clear previous email content
    outputBox.innerHTML = `
        <div class="flex flex-col items-center justify-center h-40 text-white/80">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2 loading-animation"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>
            <p class="loading-text">${currentTranslations.outputBoxLoading}</p>
        </div>
    `;
    copyBtn.classList.add('disabled');
    copyBtn.disabled = true;

    try {
        let signature = `\n\n${currentTranslations.signatureBestRegards},\n${formData.senderName}`;
        if (formData.senderCompany) {
            signature += `\n${formData.senderCompany}`;
        }
        signature += `\n${currentTranslations.signatureEmail} ${formData.senderEmail}`;
        if (formData.senderPhone) {
            signature += `\n${currentTranslations.signaturePhone} ${formData.senderPhone}`;
        }

        const prompt = `Write a ${formData.emailTone} cold email to ${formData.jobTitle} at ${formData.companyName} named ${formData.recipientName}. The email should pitch: ${formData.productService}.
        
The email language should be in ${currentLanguage === 'en' ? 'English' : currentLanguage === 'fr' ? 'French' : 'Arabic'}.

Make the email:
- Professional and personalized
- Include a compelling subject line (e.g., "Subject: Relevant Title")
- Have a clear call-to-action
- Be concise but persuasive
- Follow cold email best practices
- **Crucially, end the email with a professional closing and the sender's details:**
${signature}

Format the response as a complete email with Subject line and body.`;

        const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }],
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 1024,
                }
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('API Error:', errorData);
            let errorMessage = currentTranslations.errorApi + (errorData.error?.message || `HTTP error! Status: ${response.status}`);
            if (response.status === 403) {
                errorMessage += currentTranslations.errorApi403;
            } else if (response.status === 400) {
                errorMessage += currentTranslations.errorApi400;
            } else if (response.status === 500) {
                errorMessage += currentTranslations.errorApi500;
            }
            errorMessage += currentTranslations.errorApiProblem;
            throw new Error(errorMessage);
        }

        const data = await response.json();
        
        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) {
            throw new Error(currentTranslations.errorApiInvalidResponse);
        }
        
        generatedEmailContent = data.candidates[0].content.parts[0].text;
        outputBox.innerHTML = `<pre class="text-white/90 whitespace-pre-wrap font-sans leading-relaxed">${generatedEmailContent}</pre>`;
        copyBtn.classList.remove('disabled');
        copyBtn.disabled = false;

    } catch (err) {
        console.error('Error generating email:', err);
        outputBox.innerHTML = `<p class="text-red-400 italic text-center py-12">${err.message}</p>`;
        generatedEmailContent = ''; // Clear content on error
        copyBtn.classList.add('disabled');
        copyBtn.disabled = true;
    } finally {
        isLoading = false;
        updateGenerateButtonState();
    }
}

async function copyToClipboard() {
    const currentTranslations = translations[currentLanguage];

    if (!generatedEmailContent) {
        alert(currentTranslations.alertFillRequired); // Re-use alert for consistency
        return;
    }

    try {
        await navigator.clipboard.writeText(outputBox.textContent); // Use textContent instead of innerHTML
        copySuccess = true;
        updateCopyButtonState();
        setTimeout(() => {
            copySuccess = false;
            updateCopyButtonState();
        }, 2000);
    } catch (err) {
        alert(currentTranslations.copyButtonFailed);
        console.error('Failed to copy to clipboard', err);
        copySuccess = false;
        updateCopyButtonState(); // Reset immediately
    }
}

// --- UI Update Functions ---

function updateGenerateButtonState() {
    const currentTranslations = translations[currentLanguage];
    if (isLoading) {
        generateBtn.classList.add('disabled');
        generateBtn.disabled = true;
        generateBtnIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-loader-2 animate-spin"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>`;
        generateBtnText.textContent = currentTranslations.generateButtonLoading;
    } else {
        generateBtn.classList.remove('disabled');
        generateBtn.disabled = false;
        generateBtnIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rocket"><path d="M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.75-.75 1.39-1.68 1.61-2.85A10.87 10.87 0 0 0 7.5 7.5c-2.43 2.07-3.64 5.31-2.91 9z"/><path d="M14 5c0-1.5 1-2 1-2s.5-1 2-1 2 1 2 1v2l-1 1h-2L14 5Z"/><path d="M10 15V9l4-4h4l1 1v4l-4 4h-4Z"/><path d="M8 17L5 20"/><path d="M13 18l-1 1"/><path d="M16 13l1-1"/><path d="M19 10l-1-1"/></svg>`;
        generateBtnText.textContent = currentTranslations.generateButton;
    }
}

function updateCopyButtonState() {
    const currentTranslations = translations[currentLanguage];
    if (copySuccess) {
        copyBtn.classList.add('success');
        copyBtnIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check"><polyline points="20 6 9 17 4 12"/></svg>`;
        copyBtnText.textContent = currentTranslations.copyButtonCopied;
    } else {
        copyBtn.classList.remove('success');
        copyBtnIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`;
        copyBtnText.textContent = currentTranslations.copyButton;
    }
    // Ensure disabled state is managed externally (by generateEmail function)
}

// --- Event Listeners and Initial Setup ---

// Attach input handlers
document.querySelectorAll('.form-input').forEach(input => {
    input.addEventListener('input', handleInputChange);
});

// Event listener for Generate button
generateBtn.addEventListener('click', generateEmail);
// Event listener for Copy button
copyBtn.addEventListener('click', copyToClipboard);


// Language selector logic
languageButtons.forEach(button => {
    button.addEventListener('click', () => {
        const newLang = button.value;
        if (newLang !== currentLanguage) {
            currentLanguage = newLang;
            localStorage.setItem('selectedLanguage', newLang);
            applyTranslations(newLang);
        }
    });
});

// On DOMContentLoaded, load user data, set initial language, and generate particles
document.addEventListener('DOMContentLoaded', () => {
    loadUserData();
    applyTranslations(currentLanguage);
    generateParticles(50); // Number of particles
});